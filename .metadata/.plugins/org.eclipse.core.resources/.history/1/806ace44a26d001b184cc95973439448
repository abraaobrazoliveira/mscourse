package br.com.abosolutions.hrworker.resources;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.env.Environment;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.com.abosolutions.hrworker.entities.Worker;
import br.com.abosolutions.hrworker.repositories.WorkerRepository;

@RestController
@RequestMapping(value = "/workers")
public class WorkerResource {

    private static Logger logger = LoggerFactory.getLogger(WorkerResource.class);
    
    @Value("${teste.config}")
    private String testConfig;
    
    @Autowired
    private YAMLConfig myConfig;

    @Autowired
    private Environment env;

    @Autowired
    private WorkerRepository workerRepository;
    
    @GetMapping("/configs")
    public ResponseEntity<Void> getConfig(){
      logger.info("CONFIG = " + testConfig);
      return ResponseEntity.noContent().build();
    }


    @GetMapping("/")
    public ResponseEntity<List<Worker>> findAll(){
        List<Worker> workerList = workerRepository.findAll();
        return ResponseEntity.ok(workerList);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Worker> getById(@PathVariable("id") Long id){
    	
    	try {
			Thread.sleep(3000L);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	
        logger.info("PORT = " + env.getProperty("local.server.port"));

        Worker worker = workerRepository.findById(id).orElse(null);
        return ResponseEntity.ok(worker);
    }

}
